#!/bin/bash

#==============================================================================
# EKS Cluster Teardown Script (Simplified & Resilient)
# Description: Uninstalls Helm releases and deletes namespaces for a clean
#              teardown. Skips kubectl operations if cluster is unreachable.
#==============================================================================

echo "üí• Starting EKS Cluster Teardown..."
echo "==============================================="
echo "‚ö†Ô∏è  WARNING: This will remove ALL workloads and namespaces from the cluster!"
echo "‚ö†Ô∏è  The cluster itself will remain (use GitHub workflow to destroy)"
echo "==============================================="
echo ""

#------------------------------------------------------------------------------
# Cluster Connectivity Check
#------------------------------------------------------------------------------
echo "üîç Checking Kubernetes cluster connectivity..."
if kubectl version --client >/dev/null 2>&1 && kubectl cluster-info >/dev/null 2>&1; then
  echo "‚úÖ Kubernetes cluster is reachable."
  SKIP_K8S=false
else
  echo "‚ö†Ô∏è  Kubernetes cluster not reachable. Skipping all kubectl operations."
  SKIP_K8S=true
fi

#------------------------------------------------------------------------------
# Phase 1: Uninstall Helm Releases
#------------------------------------------------------------------------------
echo "üì¶ Phase 1: Uninstalling Helm releases..."
if [ "$SKIP_K8S" = false ]; then
  helm uninstall promtail -n logging || echo "‚ö†Ô∏è Failed to uninstall promtail"
  helm uninstall loki -n logging || echo "‚ö†Ô∏è Failed to uninstall loki"
  helm uninstall kube-prometheus-stack -n kube-prometheus-stack || echo "‚ö†Ô∏è Failed to uninstall Prometheus stack"
  helm uninstall ingress-nginx -n ingress-nginx || echo "‚ö†Ô∏è Failed to uninstall ingress-nginx"
else
  echo "  ‚Ä¢ Skipped ‚Äî no cluster connection."
fi

#------------------------------------------------------------------------------
# Phase 2: Delete Namespaces
#------------------------------------------------------------------------------
echo "üßπ Phase 2: Deleting namespaces..."
if [ "$SKIP_K8S" = false ]; then
  for ns in snakegame logging kube-prometheus-stack ingress-nginx; do
    echo "  ‚Ä¢ Deleting namespace: $ns"
    kubectl delete namespace "$ns" --ignore-not-found || echo "‚ö†Ô∏è Failed to delete namespace: $ns"
  done
else
  echo "  ‚Ä¢ Skipped ‚Äî no cluster connection."
fi

#------------------------------------------------------------------------------
# Phase 3: Verification
#------------------------------------------------------------------------------
echo ""
echo "üîç Phase 3: Verifying cleanup..."
if [ "$SKIP_K8S" = false ]; then
  echo "==============================================="
  echo "üìä REMAINING NAMESPACES"
  echo "==============================================="
  kubectl get namespaces || echo "‚ö†Ô∏è Unable to list namespaces."

  echo ""
  echo "==============================================="
  echo "üéØ REMAINING HELM RELEASES"
  echo "==============================================="
  helm list --all-namespaces || echo "‚ö†Ô∏è Unable to list Helm releases."

  echo ""
  echo "==============================================="
  echo "‚ö° REMAINING LOADBALANCER SERVICES"
  echo "==============================================="
  kubectl get svc --all-namespaces --field-selector spec.type=LoadBalancer || echo "‚ö†Ô∏è Unable to list LoadBalancer services."
else
  echo "  ‚Ä¢ Skipped ‚Äî no cluster connection."
fi

#------------------------------------------------------------------------------
# Completion
#------------------------------------------------------------------------------
echo ""
echo "==============================================="
echo "‚úÖ TEARDOWN COMPLETE!"
echo "==============================================="
echo "All Helm releases and namespaces have been removed (if reachable)."
echo ""
echo "üìù Next steps:"
echo "  ‚Ä¢ Cluster infrastructure remains running"
echo "  ‚Ä¢ Use GitHub workflow to destroy Terraform resources"
echo "  ‚Ä¢ Check AWS console for any remaining LoadBalancers"
echo ""
echo "üí° To redeploy: Run ./setup.sh"
echo ""
